# ===================================================
# INTERNATIONAL TIJARAT - SECURITY & LOAD TESTING
# ===================================================

config:
  target: 'http://localhost:5000'
  phases:
    # Phase 1: Security baseline testing
    - name: "Security Baseline"
      duration: 30
      arrivalRate: 5
    
    # Phase 2: Normal load simulation  
    - name: "Normal Load"
      duration: 60
      arrivalRate: 20
    
    # Phase 3: Peak load testing
    - name: "Peak Load"
      duration: 120
      arrivalRate: 50
    
    # Phase 4: Stress testing
    - name: "Stress Test"
      duration: 60
      arrivalRate: 100

  # Request defaults for security testing
  defaults:
    headers:
      'Content-Type': 'application/json'
      'User-Agent': 'Security-Test-Suite/1.0'

# ===================================================
# SECURITY TEST SCENARIOS
# ===================================================
scenarios:
  # Test 1: Health check availability
  - name: "Health Check Security"
    weight: 10
    flow:
      - get:
          url: "/api/health"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - hasProperty: "database"
            - hasProperty: "cache"

  # Test 2: Rate limiting validation
  - name: "Rate Limiting Test"
    weight: 15
    flow:
      - loop:
          - get:
              url: "/api/products"
          over: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

  # Test 3: Authentication security
  - name: "Authentication Security"
    weight: 20
    flow:
      # Test login with invalid credentials
      - post:
          url: "/api/auth/login"
          json:
            email: "test@test.com"
            password: "wrongpassword"
          expect:
            - statusCode: [400, 401, 403]
      
      # Test accessing protected routes without token
      - get:
          url: "/api/orders/user"
          expect:
            - statusCode: [401, 403]

  # Test 4: Input validation security
  - name: "Input Validation Security"
    weight: 15
    flow:
      # Test SQL injection attempts
      - post:
          url: "/api/auth/login"
          json:
            email: "'; DROP TABLE users; --"
            password: "test"
          expect:
            - statusCode: [400, 401]
      
      # Test XSS attempts
      - post:
          url: "/api/auth/register"
          json:
            email: "test@test.com"
            password: "password123"
            name: "<script>alert('xss')</script>"
          expect:
            - statusCode: [400, 422]

  # Test 5: Product endpoints performance
  - name: "Product Endpoints"
    weight: 25
    flow:
      - get:
          url: "/api/products"
          expect:
            - statusCode: 200
            - contentType: json
            - responseTime: 200  # Should be fast due to caching
      
      - get:
          url: "/api/products/categories"
          expect:
            - statusCode: 200
            - responseTime: 100  # Should be very fast due to caching
      
      - get:
          url: "/api/products/featured"
          expect:
            - statusCode: 200

  # Test 6: File upload security
  - name: "File Upload Security"
    weight: 10
    flow:
      # Test file upload without authentication
      - post:
          url: "/api/products/add"
          headers:
            'Content-Type': 'multipart/form-data'
          formData:
            name: "Test Product"
            price: "99.99"
          expect:
            - statusCode: [401, 403]

  # Test 7: CORS security validation
  - name: "CORS Security Test"
    weight: 5
    flow:
      - get:
          url: "/api/products"
          headers:
            'Origin': 'https://malicious-site.com'
          capture:
            - header: 'Access-Control-Allow-Origin'
              as: 'corsHeader'

# ===================================================
# SECURITY EXPECTATIONS
# ===================================================
expectations:
  - name: "Response time under load"
    condition: "response_time < 500"  # 500ms max
    
  - name: "Error rate acceptable"  
    condition: "error_rate < 5"      # Less than 5% errors
    
  - name: "Cache hit rate healthy"
    condition: "cache_hit_rate > 80" # 80%+ cache hits

# ===================================================
# MONITORING PLUGINS
# ===================================================
plugins:
  expect: {}
  metrics-by-endpoint: 
    # Track metrics per endpoint
    useOnlyRequestNames: true
  
# ===================================================
# LOAD TEST REPORTING
# ===================================================
reporting:
  json: "security-test-results.json"
  html: "security-test-report.html"
